// This file is part of hardfloat-spade.
// hardfloat-spade is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// hardfloat-spade is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// You should have received a copy of the GNU Lesser General Public License along with hardfloat-spade. If not, see <https://www.gnu.org/licenses/>.

// This file contains raw bindings for HardFloat verilog modules. The
// documentation comments are taken directly from the documentation HTML page
// provided with the Hardfloat distribution.
//
// I've replaced all instances of `clog` with Spade's `uint_bytes_to_fit`.

/// Converts from a standard format into HardFloat’s equivalent recoded format.
#[no_mangle]
entity fNToRecFN <#uint intWidth, #uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] signedIn: bool,
    #[no_mangle] in: uint<intWidth>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] out: inv &uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] exceptionFlags: inv &uint<5>
) __builtin__

/// Converts back from a recoded format to standard format.
#[no_mangle]
entity recFNToFN <#uint expWidth, #uint sigWidth>(
    #[no_mangle] in: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] out: inv &uint<{expWidth + sigWidth}>
) __builtin__

/// Converts from an integer type to floating-point in recoded form.
/// The input named `in` is interpreted as an unsigned integer if `signedIn` is false, or as a signed integer if `signedIn` is true.
#[no_mangle]
entity iNToRecFN<#uint intWidth, #uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] signedIn: bool,
    #[no_mangle] in: uint<intWidth>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] out: inv &uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] exceptionFlags: inv &uint<5>
) __builtin__

/// Performs a similar function, but returns a floating-point value in deconstructed form.
#[no_mangle]
entity iNToRawFN<#uint intWidth>(
    #[no_mangle] signedIn: bool,
    #[no_mangle] in: uint<intWidth>,
    #[no_mangle] isZero: inv &bool,
    #[no_mangle] sign: inv &bool,
    #[no_mangle] sExp: inv &int<{uint_bits_to_fit(intWidth) + 3}>,
    #[no_mangle] sig: inv &uint<{intWidth + 1}>
) __builtin__

/// Converts from a floating-point value in recoded form to an integer type.
/// The output named `out` is an unsigned integer if input `signedOut` is false, or is a signed integer if `signedOut` is true.
/// As explained earlier in section 7, Exception Results, the 3-bit output named `intExceptionFlags` reports exceptions invalid, overflow, and inexact.
/// Although `intExceptionFlags` distinguishes integer overflow separately from invalid exceptions, the IEEE Standard does not permit conversions to integer to raise a floating-point overflow exception.
/// Instead, if a system has no other way to indicate that a conversion to integer overflowed, the standard requires that the floating-point invalid exception be raised, not floating-point overflow.
/// Hence, the invalid and overflow bits from `intExceptionFlags` will typically be ORed together to contribute to the usual floating-point invalid exception.
#[no_mangle]
entity recFNToIN<#uint expWidth, #uint sigWidth, #uint intWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] in: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] signedOut: bool,
    #[no_mangle] out: inv &uint<{intWidth}>,
    #[no_mangle] intExceptionFlags: inv &uint<3>
) __builtin__

/// Converts a recoded floating-point value to a different recoded format (such as from single-precision to double-precision, or vice versa).
/// This module requires no special explanation.
#[no_mangle]
entity recFNToRecFN<#uint inExpWidth, #uint inSigWidth, #uint outExpWidth, #uint outSigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] in: uint<{inExpWidth + inSigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] out: inv &uint<{outExpWidth + outSigWidth + 1}>,
    #[no_mangle] exceptionFlags: inv &uint<5>
) __builtin__

/// Adds or subtracts two recoded floating-point values, returning a result in the same format.
/// When input `subOp` is 0, the operation is addition (`a + b`), and when it is 1, the operation is subtraction (`a − b`).
#[no_mangle]
entity addRecFN<#uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] subOp: bool,
    #[no_mangle] a: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] b: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] out: inv &uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] exceptionFlags: inv &uint<5>
) __builtin__

/// Returns the intermediate result of addition or subtraction before rounding, as a “raw” deconstructed floating-point value with two extra bits of significand.
/// Boolean output `invalidExc` is true if the operation should raise an invalid exception.
/// Module `roundRawFNToRecFN` can be used to round the intermediate result in conformance with the IEEE Standard.
#[no_mangle]
entity addRecFNToRaw<#uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] subOp: bool,
    #[no_mangle] a: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] b: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] invalidExc: inv &bool,
    #[no_mangle] out_isNaN: inv &bool,
    #[no_mangle] out_isInf: inv &bool,
    #[no_mangle] out_isZero: inv &bool,
    #[no_mangle] out_sign: inv &bool,
    #[no_mangle] out_sExp: inv &int<{expWidth + 2}>,
    #[no_mangle] out_sig: inv &uint<{sigWidth + 3}>
) __builtin__

/// Multiplies two recoded floating-point values, returning a result in the same format.
#[no_mangle]
entity mulRecFN<#uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] a: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] b: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] out: inv &uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] exceptionFlags: inv &uint<5>
) __builtin__

/// Returns the intermediate result of multiplication before rounding, as a “raw” deconstructed floating-point value with two extra bits of significand.
/// Boolean output `invalidExc` is true if the operation should raise an invalid exception.
/// Module `roundRawFNToRecFN` can be used to round the intermediate result in conformance with the IEEE Standard.
#[no_mangle]
entity mulRecFNToRaw<#uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] a: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] b: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] invalidExc: inv &bool,
    #[no_mangle] out_isNaN: inv &bool,
    #[no_mangle] out_isInf: inv &bool,
    #[no_mangle] out_isZero: inv &bool,
    #[no_mangle] out_sign: inv &bool,
    #[no_mangle] out_sExp: inv &int<{expWidth + 2}>,
    #[no_mangle] out_sig: inv &uint<{sigWidth + 3}>
) __builtin__

/// Implements fused multiply-add as defined by the IEEE Floating-Point Standard.
/// When `op` = 0, the module computes (`a × b`) + `c` with a single rounding.
/// If one of the multiplication operands `a` and `b` is infinite and the other is zero, the invalid exception is indicated even if operand `c` is a quiet NaN.
/// The bits of input `op` affect the signs of the addends, making it possible to turn addition into subtraction (much like the `subOp` input to `addRecFN`).
/// The exact effects of `op` are summarized in this table:
///
/// ```
/// op[1]    op[0]    Function
/// 0        0        (a × b) + c
/// 0        1        (a × b) − c
/// 1        0        c − (a × b)
/// 1        1        −(a × b) − c
/// ```
///
/// In all cases, the function is computed with only a single rounding, of course.
#[no_mangle]
entity mulAddRecFN<#uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] op: uint<2>,
    #[no_mangle] a: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] b: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] c: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] out: inv &uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] exceptionFlags: inv &uint<5>
) __builtin__

/// Returns the intermediate result of the fused multiply-add before rounding, as a “raw” deconstructed floating-point value with two extra bits of significand.
/// Boolean output `invalidExc` is true if the operation should raise an invalid exception.
/// Module `roundRawFNToRecFN` can be used to round the intermediate result in conformance with the IEEE Standard.
#[no_mangle]
entity mulAddRecFNToRaw<#uint expWidth, #uint sigWidth>(
    #[no_mangle] control: uint<1>,
    #[no_mangle] op: uint<2>,
    #[no_mangle] a: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] b: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] c: uint<{expWidth + sigWidth + 1}>,
    #[no_mangle] roundingMode: uint<3>,
    #[no_mangle] invalidExc: inv &bool,
    #[no_mangle] out_isNaN: inv &bool,
    #[no_mangle] out_isInf: inv &bool,
    #[no_mangle] out_isZero: inv &bool,
    #[no_mangle] out_sign: inv &bool,
    #[no_mangle] out_sExp: inv &int<{expWidth + 2}>,
    #[no_mangle] out_sig: inv &uint<{sigWidth + 3}>
) __builtin__

