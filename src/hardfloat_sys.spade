// Copyright (C) 2024 Ethan Uppal.
//
// This Source Code Form is subject to the terms of the Mozilla Public License,
// v. 2.0. If a copy of the MPL was not distributed with this file, You can
// obtain one at https://mozilla.org/MPL/2.0/.

// This file contains raw bindings for HardFloat verilog modules. The
// documentation comments are taken directly from the documentation HTML page
// provided with the Hardfloat distribution.
//
// I've replaced all instances of `clog` with Spade's `uint_bytes_to_fit`.

/// Description taken from Berkeley Hardfloat documentation:
///
/// Converts from standard format into HardFloat’s equivalent recoded format.
#[no_mangle(all)]
extern entity fNToRecFN <#uint intWidth, #uint expWidth, #uint sigWidth>(
    control: uint<1>,
    signedIn: bool,
    in: uint<intWidth>,
    roundingMode: uint<3>,
    out: inv &uint<{expWidth + sigWidth + 1}>,
    exceptionFlags: inv &uint<5>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Converts back from a recoded format to standard format.
#[no_mangle(all)]
extern entity recFNToFN<#uint expWidth, #uint sigWidth>(
     in: uint<{expWidth + sigWidth + 1}>,
     out: inv &uint<{expWidth + sigWidth}>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Converts from an integer type to floating-point in recoded form.
/// The input named `in` is interpreted as an unsigned integer if `signedIn` is false, or as a signed integer if `signedIn` is true.
#[no_mangle(all)]
 extern entity iNToRecFN<#uint intWidth, #uint expWidth, #uint sigWidth>(
     control: uint<1>,
     signedIn: bool,
     in: uint<intWidth>,
     roundingMode: uint<3>,
     out: inv &uint<{expWidth + sigWidth + 1}>,
     exceptionFlags: inv &uint<5>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Performs a similar function, but returns a floating-point value in deconstructed form.
#[no_mangle(all)]
 extern entity iNToRawFN<#uint intWidth>(
     signedIn: bool,
     in: uint<intWidth>,
     isZero: inv &bool,
     sign: inv &bool,
     sExp: inv &int<{uint_bits_to_fit(intWidth) + 3}>,
     sig: inv &uint<{intWidth + 1}>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Converts from a floating-point value in recoded form to an integer type.
/// The output named `out` is an unsigned integer if input `signedOut` is false, or is a signed integer if `signedOut` is true.
/// As explained earlier in section 7, Exception Results, the 3-bit output named `intExceptionFlags` reports exceptions invalid, overflow, and inexact.
/// Although `intExceptionFlags` distinguishes integer overflow separately from invalid exceptions, the IEEE Standard does not permit conversions to integer to raise a floating-point overflow exception.
/// Instead, if a system has no other way to indicate that a conversion to integer overflowed, the standard requires that the floating-point invalid exception be raised, not floating-point overflow.
/// Hence, the invalid and overflow bits from `intExceptionFlags` will typically be ORed together to contribute to the usual floating-point invalid exception.
#[no_mangle(all)]
 extern entity recFNToIN<#uint expWidth, #uint sigWidth, #uint intWidth>(
     control: uint<1>,
     in: uint<{expWidth + sigWidth + 1}>,
     roundingMode: uint<3>,
     signedOut: bool,
     out: inv &uint<{intWidth}>,
     intExceptionFlags: inv &uint<3>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Converts a recoded floating-point value to a different recoded format (such as from single-precision to double-precision, or vice versa).
/// This module requires no special explanation.
#[no_mangle(all)]
 extern entity recFNToRecFN<#uint inExpWidth, #uint inSigWidth, #uint outExpWidth, #uint outSigWidth>(
     control: uint<1>,
     in: uint<{inExpWidth + inSigWidth + 1}>,
     roundingMode: uint<3>,
     out: inv &uint<{outExpWidth + outSigWidth + 1}>,
     exceptionFlags: inv &uint<5>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Adds or subtracts two recoded floating-point values, returning a result in the same format.
/// When input `subOp` is 0, the operation is addition (`a + b`), and when it is 1, the operation is subtraction (`a − b`).
#[no_mangle(all)]
 extern entity addRecFN<#uint expWidth, #uint sigWidth>(
     control: uint<1>,
     subOp: bool,
     a: uint<{expWidth + sigWidth + 1}>,
     b: uint<{expWidth + sigWidth + 1}>,
     roundingMode: uint<3>,
     out: inv &uint<{expWidth + sigWidth + 1}>,
     exceptionFlags: inv &uint<5>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Returns the intermediate result of addition or subtraction before rounding, as a “raw” deconstructed floating-point value with two extra bits of significand.
/// Boolean output `invalidExc` is true if the operation should raise an invalid exception.
/// Module `roundRawFNToRecFN` can be used to round the intermediate result in conformance with the IEEE Standard.
#[no_mangle(all)]
 extern entity addRecFNToRaw<#uint expWidth, #uint sigWidth>(
     control: uint<1>,
     subOp: bool,
     a: uint<{expWidth + sigWidth + 1}>,
     b: uint<{expWidth + sigWidth + 1}>,
     roundingMode: uint<3>,
     invalidExc: inv &bool,
     out_isNaN: inv &bool,
     out_isInf: inv &bool,
     out_isZero: inv &bool,
     out_sign: inv &bool,
     out_sExp: inv &int<{expWidth + 2}>,
     out_sig: inv &uint<{sigWidth + 3}>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Multiplies two recoded floating-point values, returning a result in the same format.
#[no_mangle(all)]
 extern entity mulRecFN<#uint expWidth, #uint sigWidth>(
     control: uint<1>,
     a: uint<{expWidth + sigWidth + 1}>,
     b: uint<{expWidth + sigWidth + 1}>,
     roundingMode: uint<3>,
     out: inv &uint<{expWidth + sigWidth + 1}>,
     exceptionFlags: inv &uint<5>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Returns the intermediate result of multiplication before rounding, as a “raw” deconstructed floating-point value with two extra bits of significand.
/// Boolean output `invalidExc` is true if the operation should raise an invalid exception.
/// Module `roundRawFNToRecFN` can be used to round the intermediate result in conformance with the IEEE Standard.
#[no_mangle(all)]
 extern entity mulRecFNToRaw<#uint expWidth, #uint sigWidth>(
     control: uint<1>,
     a: uint<{expWidth + sigWidth + 1}>,
     b: uint<{expWidth + sigWidth + 1}>,
     invalidExc: inv &bool,
     out_isNaN: inv &bool,
     out_isInf: inv &bool,
     out_isZero: inv &bool,
     out_sign: inv &bool,
     out_sExp: inv &int<{expWidth + 2}>,
     out_sig: inv &uint<{sigWidth + 3}>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Implements fused multiply-add as defined by the IEEE Floating-Point Standard.
/// When `op` = 0, the module computes (`a × b`) + `c` with a single rounding.
/// If one of the multiplication operands `a` and `b` is infinite and the other is zero, the invalid exception is indicated even if operand `c` is a quiet NaN.
/// The bits of input `op` affect the signs of the addends, making it possible to turn addition into subtraction (much like the `subOp` input to `addRecFN`).
/// The exact effects of `op` are summarized in this table:
///
/// ```
/// op[1]    op[0]    Function
/// 0        0        (a × b) + c
/// 0        1        (a × b) − c
/// 1        0        c − (a × b)
/// 1        1        −(a × b) − c
/// ```
///
/// In all cases, the function is computed with only a single rounding, of course.
#[no_mangle(all)]
 extern entity mulAddRecFN<#uint expWidth, #uint sigWidth>(
     control: uint<1>,
     op: uint<2>,
     a: uint<{expWidth + sigWidth + 1}>,
     b: uint<{expWidth + sigWidth + 1}>,
     c: uint<{expWidth + sigWidth + 1}>,
     roundingMode: uint<3>,
     out: inv &uint<{expWidth + sigWidth + 1}>,
     exceptionFlags: inv &uint<5>
);

/// Description taken from Berkeley Hardfloat documentation:
///
/// Returns the intermediate result of the fused multiply-add before rounding, as a “raw” deconstructed floating-point value with two extra bits of significand.
/// Boolean output `invalidExc` is true if the operation should raise an invalid exception.
/// Module `roundRawFNToRecFN` can be used to round the intermediate result in conformance with the IEEE Standard.
#[no_mangle(all)]
 extern entity mulAddRecFNToRaw<#uint expWidth, #uint sigWidth>(
     control: uint<1>,
     op: uint<2>,
     a: uint<{expWidth + sigWidth + 1}>,
     b: uint<{expWidth + sigWidth + 1}>,
     c: uint<{expWidth + sigWidth + 1}>,
     roundingMode: uint<3>,
     invalidExc: inv &bool,
     out_isNaN: inv &bool,
     out_isInf: inv &bool,
     out_isZero: inv &bool,
     out_sign: inv &bool,
     out_sExp: inv &int<{expWidth + 2}>,
     out_sig: inv &uint<{sigWidth + 3}>
);
